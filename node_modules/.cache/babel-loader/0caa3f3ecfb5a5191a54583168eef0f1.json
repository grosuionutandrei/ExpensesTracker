{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactmaxudemy\\\\expense\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpenseForm = _ref => {\n  _s();\n\n  let {\n    getData\n  } = _ref;\n  let incrementer = useRef(5);\n  const [formValues, setFormValues] = useState({\n    id: '',\n    title: '',\n    amount: '',\n    date: ''\n  });\n\n  const titleChangeHandler = event => {\n    // setFormValues({\n    //   ...formValues,\n    // });\n    //  Cand state-ul actual depinde de state-ul precedent se foloseste\n    // aproach-ul cu set state prin intermediul unui arrow function\n    // Din cauza ca React programeaza state-urile , aceasta utilizare garanteaza\n    // intotdeauna state-ul cel mai recent.\n    setFormValues(prevState => {\n      return { ...formValues,\n        [event.target.name]: event.target.value,\n        id: `e${incrementer.current}`\n      };\n    });\n  };\n\n  const amountChangeHandler = event => {\n    setFormValues(prevState => {\n      return { ...formValues,\n        [event.target.name]: event.target.value\n      };\n    });\n  };\n\n  const dateChangeHandler = event => {\n    setFormValues(prevState => {\n      return { ...formValues,\n        [event.target.name]: event.target.value\n      };\n    });\n  }; // Two way binding , cu ajutorul atributului value putem modifica valoarea\n  // inputului atat cand user-ul introduce date, dar si adupa ce user-ul a dat\n  // submit.\n  // Permite sa culegem user_input dar si sa il schimbam dupa ce form a fost submited\n\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n    let identifier = incrementer.current;\n    const expenseNew = { ...formValues\n    };\n    expenseNew.date = new Date(formValues.date);\n    getData(expenseNew);\n    setFormValues({ ...formValues,\n      title: '',\n      amount: '',\n      date: ''\n    });\n    incrementer.current = identifier + 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitFormHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"title\",\n          type: \"text\",\n          name: \"title\",\n          value: formValues.title,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"amount\",\n          id: \"amount\",\n          value: formValues.amount,\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: formValues.date,\n          name: \"date\",\n          id: \"date\",\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"Ky20GmT52nXmvRkknZJbeqtji/E=\");\n\n_c = ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["D:/reactmaxudemy/expense/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","useRef","ExpenseForm","getData","incrementer","formValues","setFormValues","id","title","amount","date","titleChangeHandler","event","prevState","target","name","value","current","amountChangeHandler","dateChangeHandler","submitFormHandler","preventDefault","identifier","expenseNew","Date"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './ExpenseForm.css';\nexport const ExpenseForm = ({ getData }) => {\n  let incrementer = useRef(5);\n  const [formValues, setFormValues] = useState({\n    id: '',\n    title: '',\n    amount: '',\n    date: '',\n  });\n  const titleChangeHandler = (event) => {\n    // setFormValues({\n    //   ...formValues,\n\n    // });\n\n    //  Cand state-ul actual depinde de state-ul precedent se foloseste\n    // aproach-ul cu set state prin intermediul unui arrow function\n    // Din cauza ca React programeaza state-urile , aceasta utilizare garanteaza\n    // intotdeauna state-ul cel mai recent.\n    setFormValues((prevState) => {\n      return {\n        ...formValues,\n        [event.target.name]: event.target.value,\n        id: `e${incrementer.current}`,\n      };\n    });\n  };\n\n  const amountChangeHandler = (event) => {\n    setFormValues((prevState) => {\n      return {\n        ...formValues,\n        [event.target.name]: event.target.value,\n      };\n    });\n  };\n\n  const dateChangeHandler = (event) => {\n    setFormValues((prevState) => {\n      return {\n        ...formValues,\n        [event.target.name]: event.target.value,\n      };\n    });\n  };\n\n  // Two way binding , cu ajutorul atributului value putem modifica valoarea\n  // inputului atat cand user-ul introduce date, dar si adupa ce user-ul a dat\n  // submit.\n  // Permite sa culegem user_input dar si sa il schimbam dupa ce form a fost submited\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    let identifier = incrementer.current;\n    const expenseNew = { ...formValues };\n    expenseNew.date = new Date(formValues.date);\n    getData(expenseNew);\n\n    setFormValues({ ...formValues, title: '', amount: '', date: '' });\n    incrementer.current = identifier + 1;\n  };\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            name=\"title\"\n            value={formValues.title}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"amount\">Amount</label>\n          <input\n            name=\"amount\"\n            id=\"amount\"\n            value={formValues.amount}\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label htmlFor=\"date\">Amount</label>\n          <input\n            value={formValues.date}\n            name=\"date\"\n            id=\"date\"\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add expense</button>\n      </div>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}